{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { App } from '@capacitor/app';\nimport { IonRouterOutlet } from '@ionic/angular';\nimport { Keyboard } from '@capacitor/keyboard';\nimport { Network } from '@capacitor/network';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@awesome-cordova-plugins/diagnostic/ngx\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@awesome-cordova-plugins/splash-screen/ngx\";\nimport * as i5 from \"@awesome-cordova-plugins/status-bar/ngx\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@awesome-cordova-plugins/toast/ngx\";\n\nconst swal = require('sweetalert');\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(router, diagnostic, platform, splashScreen, statusBar, zone, alertController, navController, toastController, location, toast) {\n      this.router = router;\n      this.diagnostic = diagnostic;\n      this.platform = platform;\n      this.splashScreen = splashScreen;\n      this.statusBar = statusBar;\n      this.zone = zone;\n      this.alertController = alertController;\n      this.navController = navController;\n      this.toastController = toastController;\n      this.location = location;\n      this.toast = toast;\n      this.lastBackTime = 0;\n      this.intervalExitApp = 2000;\n      this.initializeApp();\n      this.platform.backButton.subscribe(() => {\n        if (this.routerOutlet && this.routerOutlet.canGoBack()) {\n          this.routerOutlet.pop();\n        } else if (this.router.url === '/profil' || this.router.url === '/login' || this.router.url === '/video' || this.router.url === '/pengajian' || this.router.url === '/produk-mu' || this.router.url === '/jadwal-sholat' || this.router.url === '/cabang-ranting') {\n          this.router.navigate(['/home']);\n        }\n      });\n    }\n\n    initializeApp() {\n      this.platform.ready().then(() => {\n        this.statusBar.styleDefault(); // this.splashScreen.hide();\n\n        this.statusBar.overlaysWebView(false);\n        this.statusBar.backgroundColorByHexString('#349075');\n        this.checkPermission();\n        this.cekKoneksi();\n        this.backButtonEvent();\n        Keyboard.addListener('keyboardWillShow', info => {\n          console.log('keyboard will show with height:', info.keyboardHeight);\n        });\n        Keyboard.addListener('keyboardDidShow', info => {\n          console.log('keyboard did show with height:', info.keyboardHeight);\n        });\n        Keyboard.addListener('keyboardWillHide', () => {\n          console.log('keyboard will hide');\n        });\n        Keyboard.addListener('keyboardDidHide', () => {\n          console.log('keyboard did hide');\n        });\n      });\n      App.addListener('appUrlOpen', event => {\n        this.zone.run(() => {\n          const slug = event.url.split(\"salammu.id\").pop();\n\n          if (slug) {\n            this.router.navigateByUrl(slug);\n          } else {\n            this.router.navigate(['/login']);\n          } // If no match, do nothing - let regular routing\n          // logic take over\n\n        });\n      });\n    }\n\n    backButtonEvent() {\n      this.platform.backButton.subscribeWithPriority(10, () => {\n        let currentTime = new Date().getTime();\n        console.log(\"currentTime\", currentTime);\n        console.log(\"lastBackTime -> \", this.lastBackTime);\n        console.log(\"Subtraction -> \", currentTime - this.lastBackTime);\n\n        if (!this.routerOutlet.canGoBack() && this.lastBackTime && this.lastBackTime > 0 && currentTime - this.lastBackTime < this.intervalExitApp) {\n          navigator[\"app\"].exitApp();\n          return;\n        }\n\n        if (!this.routerOutlet.canGoBack()) {\n          this.createToastExitApp();\n        } else {\n          this.routerOutlet.pop();\n        }\n\n        console.log(\"backButton.subscribeWithPriority\");\n      });\n    }\n\n    createToastExitApp() {\n      this.toastController.create({\n        message: 'Tekan sekali lagi untuk keluar',\n        duration: 2000,\n        color: \"primary\"\n      }).then(toastEl => {\n        toastEl.present();\n        this.lastBackTime = new Date().getTime();\n      });\n    }\n\n    cekKoneksi() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.networkListener = Network.addListener('networkStatusChange', status => {\n          this.networkStatus = status;\n\n          if (this.networkStatus.connected == false) {\n            swal({\n              title: \"Tidak Ada Koneksi Internet\",\n              text: \"Silahkan cek kembali koneksi internet anda.\",\n              icon: \"warning\"\n            });\n          }\n        });\n        this.networkStatus = yield Network.getStatus();\n      });\n    }\n\n    ngOnDestroy() {\n      this.platform.backButton.unsubscribe();\n      this.networkListener.remove();\n    }\n\n    checkPermission() {\n      if (this.platform.is('android')) {\n        let successCallback = isAvailable => {\n          console.log('Is available? ' + isAvailable);\n        };\n\n        let errorCallback = e => console.error(e);\n\n        this.diagnostic.isLocationAvailable().then(successCallback).catch(errorCallback);\n        this.diagnostic.isGpsLocationAvailable().then(successCallback, errorCallback);\n        this.diagnostic.getLocationMode().then(state => __awaiter(this, void 0, void 0, function* () {\n          if (state == this.diagnostic.locationMode.LOCATION_OFF) {\n            const confirm = yield this.alertController.create({\n              header: 'SalamMU',\n              message: 'Lokasi belum diaktifkan di perangkat ini. Pergi ke pengaturan untuk mengaktifkan lokasi.',\n              buttons: [{\n                text: 'Pengaturan',\n                handler: () => {\n                  this.diagnostic.switchToLocationSettings();\n                }\n              }]\n            });\n            yield confirm.present();\n          } else {\n            console.log('ok');\n          }\n        })).catch(e => console.error(e));\n      }\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.Diagnostic), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i4.SplashScreen), i0.ɵɵdirectiveInject(i5.StatusBar), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.AlertController), i0.ɵɵdirectiveInject(i3.NavController), i0.ɵɵdirectiveInject(i3.ToastController), i0.ɵɵdirectiveInject(i6.Location), i0.ɵɵdirectiveInject(i7.Toast));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(IonRouterOutlet, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.routerOutlet = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-app\");\n        i0.ɵɵelement(1, \"ion-router-outlet\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i3.IonApp, i3.IonRouterOutlet],\n    styles: [\"\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}