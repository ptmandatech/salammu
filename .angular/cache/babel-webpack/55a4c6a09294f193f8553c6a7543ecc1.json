{"ast":null,"code":"import Quill from 'quill';\nvar Constants = {\n  ID_SPLIT_FLAG: '__ID_SPLIT__',\n  QUILL_UPLOAD_HOLDER_CLASS_NAME: 'quill-upload-progress',\n  DEFAULT_STYLES: `\n    .quill-progress-wrapper {\n      height: 0.25rem;\n      position: relative;\n      background: #f3efe6;\n      overflow: hidden;\n      margin-top: 0;\n    }\n\n    .quill-progress-wrapper span {\n      display: block;\n      height: 100%;\n    }\n\n    .quill-progress {\n      background-color: #3498db;\n      animation: progressBar 10s ease-in-out;\n      animation-fill-mode:both;\n    }\n\n    @keyframes progressBar {\n      0% { width: 0; }\n      100% { width: 100%; }\n    }\n\n    .d-none {\n      display: none;\n    }\n\n    .quill-upload-progress {\n      opacity: 0.3;\n    }\n  `,\n  blots: {\n    video: 'video',\n    image: 'image'\n  },\n  LOADING_CLASS_NAME: 'quill-progress-wrapper',\n  NONE_DISPLAY_CLASS_NAME: 'd-none'\n};\n\nclass Helper {\n  constructor() {\n    this.id = 0;\n    this.prefix = 'QUILL_UPLOAD_HANDLER';\n  }\n\n  generateID() {\n    const id = this.id;\n    this.id = id + 1;\n    return `${this.prefix}-${id}`;\n  }\n\n  loadingHTML() {\n    return `<div id=\"${Constants.ID_SPLIT_FLAG}.QUILL-LOADING\">\n                        <span style=\"width:90%;\"><span class=\"quill-progress\">\n                        </span></span>\n                      </div>`;\n  }\n\n}\n\nclass Styled {\n  constructor(styles) {\n    this.styles = styles;\n    this.setUp();\n  }\n\n  setUp() {\n    this.eStyle = document.createElement('style');\n    this.eStyle.type = 'text/css';\n    document.getElementsByTagName('head')[0].appendChild(this.eStyle);\n  }\n\n  setStyle(styles) {\n    this.styles = styles;\n  }\n\n  apply() {\n    this.eStyle.appendChild(document.createTextNode(this.styles || Constants.DEFAULT_STYLES));\n  }\n\n}\n\nclass BaseHandler {\n  constructor(quill, options) {\n    this.helpers = new Helper();\n    this.quill = quill;\n    this.options = options;\n    this.range = null;\n    new Styled().apply();\n\n    if (this.isNotExistLoading()) {\n      const node = document.createElement('div');\n      node.innerHTML = this.helpers.loadingHTML();\n      this.quill.container.appendChild(node);\n    }\n\n    if (typeof this.options.upload !== 'function') {\n      console.warn('[Missing config] upload function that returns a promise is required');\n    }\n\n    setTimeout(() => {\n      if (!this.options.accepts) {\n        if (this.handler === Constants.blots.image) {\n          this.options.accepts = ['jpg', 'jpeg', 'png'];\n        }\n\n        if (this.handler === Constants.blots.video) {\n          this.options.accepts = ['mp4', 'webm'];\n        }\n      }\n\n      if (this.handler === Constants.blots.image) {\n        this.possibleExtension = new Set(['apng', 'bmp', 'gif', 'ico', 'cur', 'jpg', 'jpeg', 'jfif', 'pjpeg', 'pjp', 'png', 'svg', 'tif', 'tiff', 'webp']);\n      }\n\n      if (this.handler === Constants.blots.video) {\n        this.possibleExtension = new Set(['mp4', 'webm', '3gp', 'mp4', 'mpeg', 'quickTime', 'ogg']);\n      }\n\n      this.allowedFormatRegex = new RegExp('^(' + this.options.accepts.filter(el => this.possibleExtension.has(el.toLowerCase())).reduce((acc, el, i) => acc.concat(i !== 0 ? `|${el}` : `${el}`), '') + ')$', 'i');\n    }, 1);\n  }\n\n  applyForToolbar() {\n    const toolbar = this.quill.getModule('toolbar');\n    this.loading = document.getElementById(`${Constants.ID_SPLIT_FLAG}.QUILL-LOADING`);\n    toolbar.addHandler(this.handler, this.selectLocalFile.bind(this));\n  }\n\n  selectLocalFile() {\n    this.range = this.quill.getSelection();\n    this.fileHolder = document.createElement('input');\n    this.fileHolder.setAttribute('type', 'file');\n    this.fileHolder.setAttribute('accept', `${this.handler}/*`);\n    this.fileHolder.onchange = this.fileChanged.bind(this);\n    this.fileHolder.click();\n  }\n\n  loadFile(context) {\n    this.loading.removeAttribute('class');\n    this.loading.setAttribute('class', Constants.LOADING_CLASS_NAME);\n    const file = context.fileHolder.files[0];\n    this.handlerId = this.helpers.generateID();\n    const fileReader = new FileReader();\n    fileReader.addEventListener('load', () => {\n      this.insertBase64Data(fileReader.result, this.handlerId);\n    }, false);\n\n    if (!file) {\n      console.warn('[File not found] Something was wrong, please try again!!');\n      return null;\n    }\n\n    fileReader.readAsDataURL(file);\n    return {\n      file,\n      handlerId: this.handlerId\n    };\n  }\n\n  fileChanged() {\n    const {\n      file,\n      handlerId\n    } = this.loadFile(this);\n\n    if (!file) {\n      return;\n    }\n\n    const extension = file.name.split('.').pop();\n\n    if (!this.isValidExtension(extension)) {\n      console.warn('[Wrong Format] Format was wrong, please try with correct format!!');\n    }\n\n    if (!this.hasValidMimeType(file.type)) {\n      console.warn(`[Incorrect Mime Type] The MIME Type of uploaded file is not ${this.handler}!!`);\n    }\n\n    this.embedFile(file, handlerId);\n  }\n\n  embedFile(file, handlerId) {\n    this.options.upload(file).then(url => {\n      this.insertFileToEditor(url, handlerId);\n      this.loading.removeAttribute('class');\n      this.loading.setAttribute('class', Constants.NONE_DISPLAY_CLASS_NAME);\n    }, error => {\n      this.loading.removeAttribute('class');\n      this.loading.setAttribute('class', Constants.NONE_DISPLAY_CLASS_NAME);\n      setTimeout(() => {\n        const el = document.getElementById(handlerId);\n        el.remove();\n      }, 1000);\n    });\n  }\n\n  insertBase64Data(url, handlerId) {\n    const range = this.range;\n    this.quill.insertEmbed(range.index, this.handler, `${handlerId}${Constants.ID_SPLIT_FLAG}${url}`);\n    const el = document.getElementById(handlerId);\n\n    if (el) {\n      el.setAttribute('class', Constants.QUILL_UPLOAD_HOLDER_CLASS_NAME);\n    }\n  }\n\n  insertFileToEditor(url, handlerId) {\n    const el = document.getElementById(handlerId);\n\n    if (el) {\n      el.setAttribute('src', url);\n      el.removeAttribute('id');\n      el.removeAttribute('class');\n    }\n  }\n\n  isValidExtension(extension) {\n    return extension && this.allowedFormatRegex.test(extension);\n  }\n\n  hasValidMimeType(type) {\n    return type && type.startsWith(this.handler);\n  }\n\n  isNotExistLoading() {\n    const loading = document.getElementById(`${Constants.ID_SPLIT_FLAG}.QUILL-LOADING`);\n    return loading == null;\n  }\n\n}\n\nconst blotPath = 'formats/image';\nconst BlockEmbed = Quill.import(blotPath);\nconst SUPPORTED_ATTRIBUTES = ['alt', 'height', 'width', 'style'];\n\nclass ImageBlot extends BlockEmbed {\n  static create(value) {\n    let id;\n    let src;\n\n    if (typeof value === 'object' && !value.url) {\n      return super.create();\n    }\n\n    const arr = value.url ? value.url.split(Constants.ID_SPLIT_FLAG) : value.split(Constants.ID_SPLIT_FLAG);\n\n    if (arr.length > 1) {\n      id = arr[0];\n      src = arr[1];\n    } else {\n      src = value;\n    }\n\n    const node = super.create(src);\n\n    if (typeof src === 'string') {\n      node.setAttribute('src', src);\n    }\n\n    if (typeof src === 'object') {\n      node.setAttribute('src', src.url);\n    }\n\n    if (id) {\n      node.setAttribute('id', id);\n    }\n\n    return node;\n  }\n\n  static value(node) {\n    return {\n      alt: node.getAttribute('alt'),\n      url: node.getAttribute('src')\n    };\n  }\n\n  static formats(domNode) {\n    return SUPPORTED_ATTRIBUTES.reduce(function (formats, attribute) {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n\n      return formats;\n    }, {});\n  }\n\n  format(name, value) {\n    if (SUPPORTED_ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n\n}\n\nImageBlot.tagName = 'img';\nImageBlot.blotName = Constants.blots.image;\nImageBlot.className = 'quill-upload-image';\nconst blotPath$1 = 'blots/block/embed';\nconst BlockEmbed$1 = Quill.import(blotPath$1);\n\nclass VideoBlot extends BlockEmbed$1 {\n  static create(value) {\n    let id;\n    let src;\n\n    if (typeof value === 'object' && !value.url) {\n      return super.create();\n    }\n\n    const arr = value.url ? value.url.split(Constants.ID_SPLIT_FLAG) : value.split(Constants.ID_SPLIT_FLAG);\n\n    if (arr.length > 1) {\n      id = arr[0];\n      src = arr[1];\n    } else {\n      src = value;\n    }\n\n    const node = super.create(src);\n\n    if (typeof src === 'string') {\n      node.setAttribute('src', src);\n    }\n\n    if (typeof src === 'object') {\n      node.setAttribute('src', src.url);\n    }\n\n    if (id) {\n      node.setAttribute('id', id);\n    }\n\n    node.setAttribute('controls', true);\n    node.setAttribute('controlsList', 'nodownload');\n    node.setAttribute('width', '100%');\n    return node;\n  }\n\n  static formats(node) {\n    const format = {};\n\n    if (node.hasAttribute('height')) {\n      format.height = node.getAttribute('height');\n    }\n\n    if (node.hasAttribute('width')) {\n      format.width = node.getAttribute('width');\n    }\n\n    return format;\n  }\n\n  static value(node) {\n    return node.getAttribute('src');\n  }\n\n  format(name, value) {\n    if (name === 'height' || name === 'width') {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name, value);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n\n}\n\nVideoBlot.tagName = 'video';\nVideoBlot.blotName = Constants.blots.video;\nVideoBlot.className = 'quill-upload-video';\n\nclass VideoHandler extends BaseHandler {\n  constructor(quill, options) {\n    super(quill, options);\n    this.handler = Constants.blots.video;\n    this.applyForToolbar();\n    Quill.register('formats/video', VideoBlot);\n  }\n\n}\n\nclass ImageHandler extends BaseHandler {\n  constructor(quill, options) {\n    super(quill, options);\n    this.handler = Constants.blots.image;\n    this.applyForToolbar();\n    Quill.register(ImageBlot, true);\n  }\n\n}\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ImageBlot, ImageHandler, VideoBlot, VideoHandler }; //# sourceMappingURL=ngx-quill-upload.js.map","map":null,"metadata":{},"sourceType":"module"}